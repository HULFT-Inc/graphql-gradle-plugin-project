
buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
	}
	dependencies {
		// Dependencies on the GraphQL Plugin. Replace this version by the release you want to use.
		classpath group: "com.graphql-java-generator", name: 'graphql-gradle-plugin', version: "${project.version}"
	}
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'graphql-gradle-plugin'

dependencies {

	// All the GraphQL dependencies (no dependencies for the GraphQL Gradle Plugin itself)
	compile "${project.group}:graphql-java-client-dependencies:${project.version}"

	// Use JUnit test framework
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.0'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.0'
	testRuntimeOnly 'org.apache.logging.log4j:log4j-jul:2.11.2'

	// Internal dependency: the client is tested against the server, so we need to build the server first (for tests)
	// testRuntimeOnly project(':graphql-gradle-plugin-samples-Basic-server')
}

// Let's configure the GraphQL Gradle Plugin
graphql {
	mode = "server"
	packageName = "com.graphqlplugin.server_mode"
}

// The next lines makes the GraphQL plugin be executed before Java compiles, so that all sources are generated on time  
compileJava.dependsOn graphqlGenerateCode
