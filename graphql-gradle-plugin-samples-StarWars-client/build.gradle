//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////  NEXT LINES ARE HERE ONLY BECAUSE WE'RE BUILDING THE PLUGIN WITHIN THE SAME MULTIMODULE PROJECT            ////////
//////  That is: we must be sure the plugin is built before we use it                                             ////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//Let's import the custom plugin we defined in buildSrc of the root project
import com.graphql_java_generator.gradle_task.StartApp
import com.graphql_java_generator.gradle_task.StopApp


buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
	}
	dependencies {
		// Dependencies on the GraphQL Plugin. Replace this version by the release you want to use.
		classpath group: "com.graphql-java-generator", name: 'graphql-gradle-plugin', version: "${project.version}"
	}
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////  Start of the StarWars Client Gradle configuration to use the GraphQL Generator plugin                     ////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'graphql-gradle-plugin'


repositories {
	jcenter()
}

dependencies {
	// All the GraphQL dependencies (no dependencies for the GraphQL Gradle Plugin itself)
	compile "${project.group}:graphql-java-client-dependencies:${project.version}"

	// Use JUnit test framework
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.0'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.0'
	testRuntimeOnly 'org.apache.logging.log4j:log4j-jul:2.11.2'

}

// Let's configure the GraphQL Gradle Plugin
graphql {
	mode = "client"  //This line is here only for the demo, as client is the default mode
}

// The next lines makes the GraphQL plugin be executed before Java compiles, so that all sources are generated on time
compileJava.dependsOn graphqlGenerateCode



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////  NEXT LINES ARE HERE ONLY TO ALLOW THE INTEGRATION TESTS AGAINST THE SERVER GENERATED BY GraphQL Generator ////////
//////  That is: this project is both a sample, and an integration test                                           ////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

test {
	// enable JUnit Platform (a.k.a. JUnit 5) support
	useJUnitPlatform()

	// The server must be assembled before we start the tests. 
	// The real dependency is on the gretty.appStart. But this task doesn't exist at build time.
	//compileJava.dependsOn ':graphql-gradle-plugin-samples-StarWars-server:assemble'
//	dependsOn(':graphql-gradle-plugin-samples-StarWars-server:appRunWar')
//	finalizedBy(':graphql-gradle-plugin-samples-StarWars-server:appStop')
}



configurations {
	// There has been an issue with stack overflow, because of redondant SLF4J implementation, when executing JUnit tests
	// It seems to be a random issue : gradle builds are not consistent !  :-((
	runtime.exclude group: "org.apache.logging.log4j", module: "log4j-to-slf4j"
	compile.exclude group: "org.apache.logging.log4j", module: "log4j-to-slf4j"
}
