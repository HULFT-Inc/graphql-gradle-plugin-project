
buildscript {
    repositories {
        mavenCentral()
		// The plugin depends on the graphql-maven-plugin, whose snapshot versions are on the local maven repository.
		// So, for development reason, we need to access to the local maven repository. It's useless for standard use of the plugin
        mavenLocal()
    }
    
    dependencies {
    	// The version number is not used in this multi-module project: the included build of graphql-gradle-plugin
    	// will replace this declaration. But this dummy declaration is needed!
    	//
    	// Of course, for a real use of the plugin in your project, you'll have to replace by the last plugin's version
        classpath 'com.graphql-java-generator:graphql-gradle-plugin:dummy'
        
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.2.6.RELEASE'
    }
    
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.graphql_java_generator.graphql-gradle-plugin'

// Let's get the group and version for this project
apply from: '../graphql-gradle-plugin/common_conf.gradle'

repositories {
	// The plugin depends on the graphql-maven-plugin plugin logic module, which is in mavenCentral (for releases), and in mavenLocal 
	// when working on the plugin development.
	mavenCentral()
	mavenLocal()		// Only if you work on the plugin development
}

dependencies {
	// The graphql-java-client-dependencies module agregates all dependencies for the generated code
    compile "com.graphql-java-generator:graphql-java-server-dependencies:${project.version}"
    // This project uses some custom scalars from the graphql-java-extended-scalars module
    compile "com.graphql-java:graphql-java-extended-scalars:${graphqlJavaExtendedScalarsVersion}"
    compile "com.github.dozermapper:dozer-core:${dozerVersion}"
    
    // Gives a GraphQL test UI available at http://localhost:8180/graphiql 
    runtime "com.graphql-java-kickstart:graphiql-spring-boot-starter:${graphiqlSpringBootStarterVersion}"

	// Dependencies for tests
	testImplementation "org.springframework:spring-test:${springFrameworkVersion}"
	testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
}

// Of course, we need to generate the GraphQL's java code before compiling the project:
compileJava.dependsOn graphqlGenerateCode

// Let's configure the GraphQL Gradle Plugin
graphql {
	mode = 'server'
	packageName = 'org.allGraphQLCases.server'
	customScalars = [ [
			graphQLTypeName: "Date",
			javaType: "java.util.Date",
			graphQLScalarTypeStaticField: "com.graphql_java_generator.customscalars.GraphQLScalarTypeDate.Date"
		], [
			graphQLTypeName: "else",
			javaType: "java.lang.String",
			graphQLScalarTypeGetter: "org.allGraphQLCases.server.impl.GraphQLScalarTypeElse.getElseScalar()"
		], [
			graphQLTypeName: "Long",
			javaType: "java.lang.Long",
			graphQLScalarTypeStaticField: "graphql.Scalars.GraphQLLong"
		], [
			graphQLTypeName: "NonNegativeInt",
			javaType: "java.lang.Integer",
			graphQLScalarTypeStaticField: "graphql.scalars.ExtendedScalars.NonNegativeInt"
	] ]
}
