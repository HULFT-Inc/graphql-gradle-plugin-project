//Let's import the custom plugin we defined in buildSrc of the root project
import com.graphql_java_generator.gradle_task.StartApp
import com.graphql_java_generator.gradle_task.StopApp


buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
	}
	dependencies {
		// Dependencies on the GraphQL Plugin. Replace this version by the release you want to use.
		classpath group: "com.graphql-java-generator", name: 'graphql-gradle-plugin', version: "${project.version}"
	}
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'graphql-gradle-plugin'

dependencies {

	// All the GraphQL dependencies (no dependencies for the GraphQL Gradle Plugin itself)
	compile "${project.group}:graphql-java-client-dependencies:${project.version}"

	// Use JUnit test framework
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.0'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.0'
	testRuntimeOnly 'org.apache.logging.log4j:log4j-jul:2.11.2'

}

// Let's configure the GraphQL Gradle Plugin
graphql {
	mode = "client"  //This line is here only for the demo, as client is the default mode
}

// The next lines makes the GraphQL plugin be executed before Java compiles, so that all sources are generated on time
compileJava.dependsOn graphqlGenerateCode


// This prevents the error "Class path contains multiple SLF4J bindings"
// Thanks to this thread: https://stackoverflow.com/questions/23984009/disable-logback-in-springboot
//configurations {
//	all*.exclude module : 'spring-boot-starter-logging'
//}
configurations {

	// Personnal add
//	runtime.exclude group: "ch.qos.logback", module: "logback-classic"
//	compile.exclude group: "ch.qos.logback", module: "logback-classic"

	runtime.exclude group: "org.apache.logging.log4j", module: "log4j-to-slf4j"
	compile.exclude group: "org.apache.logging.log4j", module: "log4j-to-slf4j"
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////  NEXT LINES ARE HERE ONLY TO ALLOW THE FULL MULTI-MODULE PROJECT, INCLUDING INTEGRATION TESTS  //////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//plugins {
//	// See https://github.com/johnrengelman/gradle-processes
//	id "com.github.johnrengelman.processes" version "0.5.0"
//}
//ProcessHandle handle = project.procs.javafork {
//	//<process configuration> See [JavaExec](http://www.gradle.org/docs/current/dsl/org.gradle.api.tasks.JavaExec.html)
//	classpath = files('../build/libs/graphql-gradle-plugin-samples-Basic-server-all-1.0.0-RC2-SNAPSHOT.jar')
//}
//
//// The next line makes sure that the plugin is installed in the local maven repository before the build starts.
//// THE NEXT LINE IS HERE ONLY BECAUSE THIS PROJECT IS WITHIN THE PLUGIN BUILD. It's useless (nd won't work) when you use the packaged plugin
//build.dependsOn gradle.includedBuild('graphql-gradle-plugin').task(':install')


test {
	// enable JUnit Platform (a.k.a. JUnit 5) support
	useJUnitPlatform()
}


task startWebApp(type: StartApp) {
	dependsOn 'assemble'
	jarFile = file("../graphql-gradle-plugin-samples-Basic-server/build/libs/${project.name}_springboot-${project.version}.jar".replaceAll('client', 'server'))
	url = 'http://localhost:8180/graphiql'
}

// The next lines insures that the Basic-server is built before starting the integration test from the client.
startWebApp.dependsOn ':graphql-gradle-plugin-samples-Basic-server:assemble'
test.dependsOn startWebApp

//test.finalizedBy {
//	startWebApp.stopApp()
//}

//task stopWebApp(type: StopApp) {
//	process = tasks["startWebApp"].process
//}