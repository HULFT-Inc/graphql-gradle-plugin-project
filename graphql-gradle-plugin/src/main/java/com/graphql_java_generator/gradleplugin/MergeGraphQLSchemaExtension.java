package com.graphql_java_generator.gradleplugin;

import java.io.File;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.gradle.api.Project;

import com.graphql_java_generator.plugin.Logger;
import com.graphql_java_generator.plugin.MergeConfiguration;

/**
 * Parameters for the GraphQL Gradle plugin.
 * 
 * @author EtienneSF
 *
 */
public class MergeGraphQLSchemaExtension implements MergeConfiguration, Serializable {

	private static final long serialVersionUID = 1L;

	private GradleLogger logger;

	private final Project project;

	/** The encoding for the generated resource files */
	String resourceEncoding = MergeConfiguration.DEFAULT_RESOURCE_ENCODING;

	/** The folder where the graphql schema file(s) will be searched. The default schema is the main resource folder. */
	private String schemaFileFolder = MergeConfiguration.DEFAULT_SCHEMA_FILE_FOLDER;

	/**
	 * The pattern to find the graphql schema file(s). The default value is "/*.graphqls" meaning that the maven plugin
	 * will search all graphqls files in the "/src/main/resources" folder (please check also the <I>schemaFileFolder</I>
	 * plugin parameter).
	 */
	private String schemaFilePattern = MergeConfiguration.DEFAULT_SCHEMA_FILE_PATTERN;

	/** The folder where the generated GraphQL schema will be stored */
	private String targetFolder = MergeConfiguration.DEFAULT_TARGET_FOLDER;

	/**
	 * The name of the target filename, in which the schema is generated. This file is stored in the folder, defined in
	 * the <I>targetFolder</I> plugin parameter.
	 */
	private String targetSchemaFileName;

	/**
	 * <P>
	 * Map of the code templates to be used: this allows to override the default templates, and control exactly what
	 * code is generated by the plugin.
	 * </P>
	 * <P>
	 * You can override any of the Velocity templates of the project. The list of templates is defined in the enum
	 * CodeTemplate, that you can <A HREF=
	 * "https://github.com/graphql-java-generator/graphql-maven-plugin-project/blob/master/graphql-maven-plugin-logic/src/main/java/com/graphql_java_generator/plugin/CodeTemplate.java">check
	 * here</A>.
	 * </P>
	 * <P>
	 * You can find a sample in the <A HREF=
	 * "https://github.com/graphql-java-generator/graphql-maven-plugin-project/blob/master/graphql-maven-plugin-samples/graphql-maven-plugin-samples-CustomTemplates-client/pom.xml">CustomTemplates
	 * client sample</A>.
	 * </P>
	 * <P>
	 * <B>Important notice:</B> Please note that the default templates may change in the future. And some of these
	 * modifications would need to be reported into the custom templates. We'll try to better expose a stable public API
	 * in the future.
	 * </P>
	 */
	private Map<String, String> templates = new HashMap<>();

	public MergeGraphQLSchemaExtension(Project project) {
		this.project = project;
		this.logger = new GradleLogger(project);
	}

	@Override
	public Logger getLog() {
		return logger;
	}

	@Override
	public String getPackageName() {
		// No action (this property should not exist here, will be removed in the future)
		return "not used, but may not be null!";
	}

	@Override
	public String getResourceEncoding() {
		return resourceEncoding;
	}

	@Override
	public File getSchemaFileFolder() {
		return project.file(schemaFileFolder);
	}

	@Override
	public String getSchemaFilePattern() {
		return schemaFilePattern;
	}

	@Override
	public File getTargetFolder() {
		return project.file(targetFolder);
	}

	@Override
	public String getTargetSchemaFileName() {
		return targetSchemaFileName;
	}

	@Override
	public Map<String, String> getTemplates() {
		return templates;
	}

	public void setLogger(GradleLogger logger) {
		this.logger = logger;
	}

	public void setPackageName(String packageName) {
		// No action (this property should not exist here, will be removed in the future)
	}

	public void setResourceEncoding(String resourceEncoding) {
		this.resourceEncoding = resourceEncoding;
	}

	public void setSchemaFileFolder(String schemaFileFolder) {
		this.schemaFileFolder = schemaFileFolder;
	}

	public void setSchemaFilePattern(String schemaFilePattern) {
		this.schemaFilePattern = schemaFilePattern;
	}

	public void setTargetFolder(String targetFolder) {
		// Let's create the folder now, so that it exists when if any other task needs it, during configuration time
		project.file(targetFolder).mkdirs();

		this.targetFolder = targetFolder;
	}

	public void setTargetSchemaFileName(String targetSchemaFileName) {
		this.targetSchemaFileName = targetSchemaFileName;
	}

	public void setTemplates(Map<String, String> templates) {
		this.templates = templates;
	}

}
