/**
 * 
 */
package com.graphql_java_generator.gradleplugin;

import java.io.File;

import org.gradle.api.Plugin;
import org.gradle.api.Project;
import org.gradle.api.plugins.JavaPlugin;
import org.gradle.api.plugins.JavaPluginConvention;
import org.gradle.api.tasks.SourceSet;
import org.gradle.api.tasks.compile.JavaCompile;

/**
 * @author EtienneSF
 *
 */
public class GraphQLPlugin implements Plugin<Project> {

	/** The extension name to configure the GraphQL plugin, for the code generation task */
	final public static String GRAPHQL_EXTENSION = "graphql";
	/** The name of the task that generates the code from the given GraphQL schemas */
	final public static String GRAPHQL_GENERATE_CODE_TASK_NAME = "graphqlGenerateCode";
	/** The name of SourceSet that contains the code generated by the GraphQL plugin */
	final public static String GRAPHQL_SOURCE_SET_NAME = "graphqlSourceSet";

	/** The extension name to configure the GraphQL merge task */
	final public static String MERGE_EXTENSION = "mergeSchema";
	/** The name of the task that generates a GraphqL that merges several GraphQL schemas */
	final public static String MERGE_TASK_NAME = "mergeSchemaTask";

	@Override
	public void apply(Project project) {
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		///////////// Registering the graphqlGenerateCode task
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		GraphQLExtension graphQLExtension = project.getExtensions().create(GRAPHQL_EXTENSION, GraphQLExtension.class,
				project);
		project.getTasks().register(GRAPHQL_GENERATE_CODE_TASK_NAME, GraphQLGenerateCodeTask.class, project,
				graphQLExtension);

		graphQLExtension.getLog().debug("Applying GraphQL Plugin");

		// Apply the java plugin, then add the generated source
		project.getPlugins().apply(JavaPlugin.class);

		JavaPluginConvention javaConvention = project.getConvention().getPlugin(JavaPluginConvention.class);
		SourceSet main = javaConvention.getSourceSets().getByName(SourceSet.MAIN_SOURCE_SET_NAME);
		main.getJava().srcDir(graphQLExtension.getTargetSourceFolder());

		// Check of the files added into the compileJava task
		for (File f : ((JavaCompile) project.getTasks().getByName("compileJava")).getSource()) {
			graphQLExtension.getLog()
					.debug("[After adding GraphQL sources] javaCompile contains: " + f.getAbsolutePath());
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		///////////// Registering the merge task
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		MergeGraphQLSchemaExtension extension = project.getExtensions().create(MERGE_EXTENSION,
				MergeGraphQLSchemaExtension.class, project);
		project.getTasks().register(MERGE_TASK_NAME, MergeGraphQLSchemaTask.class, project, extension);

	}

}
