
plugins {
	id "com.gradle.plugin-publish" version "0.11.0"
    id 'java-gradle-plugin'
}

apply from: '../common_conf.gradle'

repositories {
	jcenter()
	mavenCentral()
	//  mavenLocal is used on development site, to get snapshot of the com.graphql-java-generator maven plugin, 
	// and relatives dependencies
	mavenLocal()
}

dependencies {

	// Let's reuse the logic already implemented in our maven plugin
	compile "${project.group}:graphql-maven-plugin-logic:${project.version}"

	// Use JUnit test framework
	testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
}

/*
// The below configuration will document the plugin, once it is in the https://plugins.gradle.org portal
pluginBundle {
	website = 'https://github.com/graphql-java-generator/graphql-gradle-plugin-project'
	vcsUrl = 'git@github.com:graphql-java-generator/graphql-gradle-plugin-project.git'
	description = 'graphql-gradle-plugin is a Gradle Plugin for GraphQL, based on graphql-java. '
		+ 'It accelerates the development for both the client and the server, by generating the Java code. '
		+ 'It allows a quicker development when in contract-first approach, by avoiding to code the boilerplate code.'
	tags = ['graphql', 'graphql-java', 'graphql-java-generator', 'java', 'codegeneration', 'code generation', 'code-generation', 'generation', 'generate', 'template', 'templates']
	
	plugins {
		graphqlJavaGeneratorPlugin {
			// id is captured from java-gradle-plugin configuration
			displayName = 'graphql-gradle-plugin is a Gradle Plugin for GraphQL, based on graphql-java. '
		+ 'It accelerates the development for both the client and the server, by generating the Java code. '
		+ 'It allows a quicker development when in contract-first approach, by avoiding to code the boilerplate code.'
		}
	}
}
*/